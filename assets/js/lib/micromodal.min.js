!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).MicroModal = t(); }(this, function () { "use strict"; function e(e, t) { for (var o = 0; o < t.length; o++) { var i = t[o]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i); } } function t(e) { return function (e) { if (Array.isArray(e)) return o(e); }(e) || function (e) { if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e); }(e) || function (e, t) { if (e) { if ("string" == typeof e) return o(e, t); var i = Object.prototype.toString.call(e).slice(8, -1); if ("Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i) return Array.from(e); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return o(e, t); } }(e) || function () { throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }(); } function o(e, t) { (null == t || t > e.length) && (t = e.length); for (var o = 0, i = Array(t); o < t; o++)i[o] = e[o]; return i; } var i, n, a, r, s, l = (i = ["a[href]", "area[href]", 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "[contenteditable]", '[tabindex]:not([tabindex^="-"])',], n = function () { var o, n, a; function r(e) { var o = e.targetModal, i = e.triggers, n = void 0 === i ? [] : i, a = e.onShow, s = e.onClose, l = e.openTrigger, c = e.closeTrigger, d = e.openClass, f = e.disableScroll, u = e.disableFocus, h = e.awaitCloseAnimation, v = e.awaitOpenAnimation, g = e.debugMode, m = e.disableEsc; (function (e, t) { if (!(e instanceof t)) throw TypeError("Cannot call a class as a function"); })(this, r), this.modal = document.getElementById(o), this.config = { debugMode: void 0 !== g && g, disableScroll: void 0 !== f && f, openTrigger: void 0 === l ? "data-micromodal-trigger" : l, closeTrigger: void 0 === c ? "data-micromodal-close" : c, openClass: void 0 === d ? "is-open" : d, onShow: void 0 === a ? function () { } : a, onClose: void 0 === s ? function () { } : s, awaitCloseAnimation: void 0 !== h && h, awaitOpenAnimation: void 0 !== v && v, disableFocus: void 0 !== u && u, disableEsc: void 0 !== m && m }, n.length > 0 && this.registerTriggers.apply(this, t(n)), this.onClick = this.onClick.bind(this), this.onKeydown = this.onKeydown.bind(this); } return o = r, n = [{ key: "registerTriggers", value: function () { for (var e = this, t = arguments.length, o = Array(t), i = 0; i < t; i++)o[i] = arguments[i]; o.filter(Boolean).forEach(function (t) { t.addEventListener("click", function (t) { return e.showModal(t); }); }); } }, { key: "showModal", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (this.activeElement = document.activeElement, this.modal.setAttribute("aria-hidden", "false"), this.modal.classList.add(this.config.openClass), this.scrollBehaviour("disable"), this.addEventListeners(), this.config.awaitOpenAnimation) { var o = function t() { e.modal.removeEventListener("animationend", t, !1), e.setFocusToFirstNode(); }; this.modal.addEventListener("animationend", o, !1); } else this.setFocusToFirstNode(); this.config.onShow(this.modal, this.activeElement, t); } }, { key: "closeModal", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, t = this.modal; if (this.modal.setAttribute("aria-hidden", "true"), this.removeEventListeners(), this.scrollBehaviour("enable"), this.activeElement && this.activeElement.focus && this.activeElement.focus(), this.config.onClose(this.modal, this.activeElement, e), this.config.awaitCloseAnimation) { var o = this.config.openClass; this.modal.addEventListener("animationend", function e() { t.classList.remove(o), t.removeEventListener("animationend", e, !1); }, !1); } else t.classList.remove(this.config.openClass); } }, { key: "closeModalById", value: function (e) { this.modal = document.getElementById(e), this.modal && this.closeModal(); } }, { key: "scrollBehaviour", value: function (e) { if (this.config.disableScroll) { var t = document.querySelector("body"); switch (e) { case "enable": Object.assign(t.style, { overflow: "" }); break; case "disable": Object.assign(t.style, { overflow: "hidden" }); } } } }, { key: "addEventListeners", value: function () { this.modal.addEventListener("touchstart", this.onClick), this.modal.addEventListener("click", this.onClick), document.addEventListener("keydown", this.onKeydown); } }, { key: "removeEventListeners", value: function () { this.modal.removeEventListener("touchstart", this.onClick), this.modal.removeEventListener("click", this.onClick), document.removeEventListener("keydown", this.onKeydown); } }, { key: "onClick", value: function (e) { (e.target.hasAttribute(this.config.closeTrigger) || e.target.parentNode.hasAttribute(this.config.closeTrigger)) && (e.preventDefault(), e.stopPropagation(), this.closeModal(e)); } }, { key: "onKeydown", value: function (e) { this.config.disableEsc || 27 !== e.keyCode ? 9 === e.keyCode && this.retainFocus(e) : this.closeModal(e); } }, { key: "getFocusableNodes", value: function () { var e = this.modal.querySelectorAll(i); return Array.apply(void 0, t(e)); } }, { key: "setFocusToFirstNode", value: function () { var e = this; if (!this.config.disableFocus) { var t = this.getFocusableNodes(); if (0 !== t.length) { var o = t.filter(function (t) { return !t.hasAttribute(e.config.closeTrigger); }); o.length > 0 && o[0].focus(), 0 === o.length && t[0].focus(); } } } }, { key: "retainFocus", value: function (e) { var t = this.getFocusableNodes(); if (0 !== t.length) { if (t = t.filter(function (e) { return null !== e.offsetParent; }), this.modal.contains(document.activeElement)) { var o = t.indexOf(document.activeElement); e.shiftKey && 0 === o && (t[t.length - 1].focus(), e.preventDefault()), !e.shiftKey && t.length > 0 && o === t.length - 1 && (t[0].focus(), e.preventDefault()); } else t[0].focus(); } } },], e(o.prototype, n), a && e(o, a), r; }(), a = null, r = function (e) { if (!document.getElementById(e)) return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e, "'"), "background-color: #f8f9fa;color: #50596c;font-weight: bold;", "ID somewhere in your code. Refer example below to resolve it."), console.warn("%cExample:", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", '<div class="modal" id="'.concat(e, '"></div>')), !1; }, s = function (e, t) { var o; if (e.length <= 0 && (console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", "data attribute."), console.warn("%cExample:", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", '<a href="#" data-micromodal-trigger="my-modal"></a>')), !t) return !0; for (var i in t) r(i); return !0; }, { init: function (e) { var o, i, r, l = Object.assign({}, { openTrigger: "data-micromodal-trigger", disableEsc: !1 }, e), c = t(document.querySelectorAll("[".concat(l.openTrigger, "]"))), d = (o = c, i = l.openTrigger, r = [], o.forEach(function (e) { var t = e.attributes[i].value; void 0 === r[t] && (r[t] = []), r[t].push(e); }), r); if (!0 !== l.debugMode || !1 !== s(c, d)) for (var f in d) { var u = d[f]; l.targetModal = f, l.triggers = t(u), a = new n(l); } }, show: function (e, t) { var o = t || {}; o.targetModal = e, !0 === o.debugMode && !1 === r(e) || (a && a.removeEventListeners(), (a = new n(o)).showModal()); }, close: function (e) { e ? a.closeModalById(e) : a.closeModal(); } }); return "undefined" != typeof window && (window.MicroModal = l), l; });